use std::path::Path;

use nes::{
    asm::{AddressToLabel, AsmLexer, BytesLabels},
    bus::Bus,
    cpu_6502::Cpu6502,
    mappers::SimpleProgram,
    opcodes::OpCode,
};

pub fn load_cpu<P: AsRef<Path>>(filename: P) -> (Cpu6502, AddressToLabel) {
    let contents = std::fs::read_to_string(filename).unwrap();
    let mut lexer = AsmLexer::new(&contents);

    match lexer.parse() {
        Ok(_) => {
            let BytesLabels {
                mut bytes,
                address_to_label,
            } = lexer.into_bytes().unwrap();
            bytes.push(OpCode::KIL as u8);
            (
                Cpu6502::new(Bus::new_shared_bus(Box::new(SimpleProgram::load(&bytes)))),
                address_to_label,
            )
        }
        Err(parse_error) => {
            parse_error.panic_nicely();
            panic!("");
        }
    }
}

#[cfg(test)]
mod test_cpu {
    use super::*;
    use std::path::PathBuf;
    pub const MAX_TICKS: usize = 1000;

    fn run_cpu_n_ticks(cpu: &mut Cpu6502, ticks: usize) {
        for _ in 0..ticks {
            if !cpu.tick() {
                panic!("The CPU quit before the end.");
            }
        }
    }

    fn run_cpu_max_ticks(cpu: &mut Cpu6502) {
        for _ in 0..MAX_TICKS {
            if !cpu.tick() {
                return;
            }
        }
        panic!("The CPU ran for too many ticks");
    }

    fn get_ram_page_text(cpu: &Cpu6502, page_u8: u8, width: u16) -> Vec<String> {
        let mut strings = vec![];
        let bus = cpu.bus.borrow();

        // Decide how many columns to make.
        let col_width = "$0000 0011 2233 4455 6677 8899 aabb ccdd eeff ".len();
        let cols = (width / col_width as u16).max(1);

        // Compute the page view.
        // e.g.
        // $0000 0011 2233 4455 6677 8899 aabb ccdd eeff
        // $0010 0011 2233 4455 6677 8899 aabb ccdd eeff
        // $0020 0011 2233 4455 6677 8899 aabb ccdd eeff
        // ..... .... .... .... .... .... .... .... ....
        // $00F0 0011 2233 4455 6677 8899 aabb ccdd eeff

        strings.push(
            "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f ".repeat(cols as usize),
            //     0011 2233 4455 6677 8899 aabb ccdd eeff
        );

        let mut parts = vec![];
        let page_u16: u16 = (page_u8 as u16) << 8;
        for i in 0..16 {
            // $00 0011 2233 4455 6677 8899 aabb ccdd eeff
            // ^^^
            parts.push(format!("${:02x}{:x}_ ", page_u8, i));
            for j in 0..8 {
                let [le, be] = bus.read_u16(page_u16 + i * 16 + j * 2).to_le_bytes();
                // $0000 0011 2233 4455 6677 8899 aabb ccdd eeff
                //       ^^^^
                parts.push(format!("{:02x}{:02x} ", le, be));
            }

            if (i + 1) % cols == 0 {
                strings.push(parts.join(""));
                parts.clear();
            }
        }
        if !parts.is_empty() {
            strings.push(parts.join(""));
        }

        strings
    }

    fn get_zero_page(cpu: &Cpu6502) -> Vec<String> {
        get_ram_page_text(cpu, 0, 100)
    }

    fn run_cpu(filename: &str, ticks: Option<usize>) -> Cpu6502 {
        let mut path = PathBuf::new();
        path.push(std::env::var("CARGO_MANIFEST_DIR").unwrap());
        path.push("src/bin/cpu-visualizer/asm/");
        path.push(filename);

        let (mut cpu, _) = load_cpu(&path);

        match ticks {
            Some(ticks) => run_cpu_n_ticks(&mut cpu, ticks),
            None => run_cpu_max_ticks(&mut cpu),
        };
        cpu
    }

    fn get_cpu_text(cpu: &Cpu6502) -> Vec<String> {
        vec![
            format!("Ticks: {}", cpu.tick_count),
            format!(" A: 0x{:02x} 0b{:08b}", cpu.a, cpu.a),
            format!(" X: 0x{:02x} 0b{:08b}", cpu.x, cpu.x),
            format!(" Y: 0x{:02x} 0b{:08b}", cpu.y, cpu.y),
            format!("PC: 0x{:04x}", cpu.pc),
            format!("SP: 0x{:02x} 0b{:08b}", cpu.s, cpu.s),
            format!(" P: 0x{:02x} 0b{:08b}", cpu.p, cpu.p),
            String::from("           NV__DIZC"),
        ]
    }

    #[test]
    fn test_add_with_carry() {
        let cpu = run_cpu("add-with-carry.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 26"
        - " A: 0x37 0b00110111"
        - " X: 0x03 0b00000011"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8022"
        - "SP: 0xff 0b11111111"
        - " P: 0x34 0b00110100"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 0035 3637 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_addressing_modes() {
        let cpu = run_cpu("addressing-modes.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 4"
        - " A: 0x22 0b00100010"
        - " X: 0x00 0b00000000"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8006"
        - "SP: 0xff 0b11111111"
        - " P: 0x35 0b00110101"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 0000 0000 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_branching() {
        let cpu = run_cpu("branching.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 40"
        - " A: 0x00 0b00000000"
        - " X: 0x00 0b00000000"
        - " Y: 0x00 0b00000000"
        - "PC: 0x805c"
        - "SP: 0xff 0b11111111"
        - " P: 0x76 0b01110110"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 0000 0000 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_compare() {
        let cpu = run_cpu("compare.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 33"
        - " A: 0x00 0b00000000"
        - " X: 0x33 0b00110011"
        - " Y: 0x00 0b00000000"
        - "PC: 0x800d"
        - "SP: 0xff 0b11111111"
        - " P: 0x35 0b00110101"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 2200 0000 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_fibonacci_u16() {
        let cpu = run_cpu("fibonacci-u16.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 510"
        - " A: 0x11 0b00010001"
        - " X: 0x31 0b00110001"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8007"
        - "SP: 0xff 0b11111111"
        - " P: 0x35 0b00110101"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 0000 0100 0100 0200 0300 0500 0800 0d00 $001_ 1500 2200 3700 5900 9000 e900 7901 6202 "
        - "$002_ db03 3d06 180a 5510 6d1a c22a 2f45 f16f $003_ 20b5 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_fibonacci_u8() {
        let cpu = run_cpu("fibonacci-u8.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 111"
        - " A: 0x79 0b01111001"
        - " X: 0x0e 0b00001110"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8007"
        - "SP: 0xff 0b11111111"
        - " P: 0x75 0b01110101"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 0001 0102 0305 080d 1522 3759 90e9 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_fill_zero_page() {
        let cpu = run_cpu("fill-zero-page.asm", Some(1000));
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 1000"
        - " A: 0x1d 0b00011101"
        - " X: 0xfa 0b11111010"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8007"
        - "SP: 0xff 0b11111111"
        - " P: 0xb4 0b10110100"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 2223 2425 2627 2829 2a2b 2c2d 2e2f 3031 $001_ 3233 3435 3637 3839 3a3b 3c3d 3e3f 4041 "
        - "$002_ 4243 4445 4647 4849 4a4b 4c4d 4e4f 5051 $003_ 5253 5455 5657 5859 5a5b 5c5d 5e5f 6061 "
        - "$004_ 6263 6465 6667 6869 6a6b 6c6d 6e6f 7071 $005_ 7273 7475 7677 7879 7a7b 7c7d 7e7f 8081 "
        - "$006_ 8283 8485 8687 8889 8a8b 8c8d 8e8f 9091 $007_ 9293 9495 9697 9899 9a9b 9c9d 9e9f a0a1 "
        - "$008_ a2a3 a4a5 a6a7 a8a9 aaab acad aeaf b0b1 $009_ b2b3 b4b5 b6b7 b8b9 babb bcbd bebf c0c1 "
        - "$00a_ c2c3 c4c5 c6c7 c8c9 cacb cccd cecf d0d1 $00b_ d2d3 d4d5 d6d7 d8d9 dadb dcdd dedf e0e1 "
        - "$00c_ e2e3 e4e5 e6e7 e8e9 eaeb eced eeef f0f1 $00d_ f2f3 f4f5 f6f7 f8f9 fafb fcfd feff 0002 "
        - "$00e_ 0304 0506 0708 090a 0b0c 0d0e 0f10 1112 $00f_ 1314 1516 1718 191a 1b1c 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_logical_operators() {
        let cpu = run_cpu("logical-operators.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 9"
        - " A: 0xfa 0b11111010"
        - " X: 0x02 0b00000010"
        - " Y: 0x00 0b00000000"
        - "PC: 0x800f"
        - "SP: 0xff 0b11111111"
        - " P: 0x34 0b00110100"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ a0fa 0000 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_status_flags() {
        let cpu = run_cpu("status-flags.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 16"
        - " A: 0x00 0b00000000"
        - " X: 0x00 0b00000000"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8017"
        - "SP: 0xff 0b11111111"
        - " P: 0x32 0b00110010"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 0000 0000 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }

    #[test]
    fn test_register_a_modes() {
        let cpu = run_cpu("register-a-modes.asm", None);
        insta::assert_yaml_snapshot!(get_cpu_text(&cpu), @r###"
        ---
        - "Ticks: 49"
        - " A: 0xd5 0b11010101"
        - " X: 0x04 0b00000100"
        - " Y: 0x00 0b00000000"
        - "PC: 0x8025"
        - "SP: 0xff 0b11111111"
        - " P: 0x34 0b00110100"
        - "           NV__DIZC"
        "###);
        insta::assert_yaml_snapshot!(get_zero_page(&cpu), @r###"
        ---
        - "       0 1  2 3  4 5  6 7  8 9  a b  c d  e f        0 1  2 3  4 5  6 7  8 9  a b  c d  e f "
        - "$000_ 5554 55d5 0000 0000 0000 0000 0000 0000 $001_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$002_ 0000 0000 0000 0000 0000 0000 0000 0000 $003_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$004_ 0000 0000 0000 0000 0000 0000 0000 0000 $005_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$006_ 0000 0000 0000 0000 0000 0000 0000 0000 $007_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$008_ 0000 0000 0000 0000 0000 0000 0000 0000 $009_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00a_ 0000 0000 0000 0000 0000 0000 0000 0000 $00b_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00c_ 0000 0000 0000 0000 0000 0000 0000 0000 $00d_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        - "$00e_ 0000 0000 0000 0000 0000 0000 0000 0000 $00f_ 0000 0000 0000 0000 0000 0000 0000 0000 "
        "###);
    }
}
